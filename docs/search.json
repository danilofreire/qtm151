[
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "",
    "text": "Welcome to QTM 151! This course introduces students to data analysis and statistical computing using Python and SQL. It is ideal for those with little or no programming experience who want to develop skills for data-driven decision making.\nOver the semester, we will cover version control for collaborative coding, Jupyter Notebooks for reproducible research, Python programming basics, data wrangling and merging in SQL, data visualisation, and introductions to linear modelling and time series analysis.\nStudents will work with real-world datasets and problems, gaining practical experience in using these tools to extract insights from data. The course aims to develop both technical skills and critical thinking needed for complex data challenges. By the end, students will be ready for advanced study in quantitative methods and data science."
  },
  {
    "objectID": "syllabus.html#suggested-books",
    "href": "syllabus.html#suggested-books",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Suggested Books",
    "text": "Suggested Books\n\nPython for Data Analysis by Wes McKinney\nElements of Data Science by Allen Downey\nAutomate the Boring Stuff with Python by Al Sweigart\nPython for Everybody by Charles Severance\nSQL for Data Scientists by Renee M. P. Teate"
  },
  {
    "objectID": "syllabus.html#online-courses",
    "href": "syllabus.html#online-courses",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Online Courses",
    "text": "Online Courses\n\nCoursera: Python for Everybody Specialisation\nedX: Python Basics for Data Science\nCodecademy: Learn Python\nDataCamp: Introduction to SQL\nCoursera: SQL for Data Science"
  },
  {
    "objectID": "syllabus.html#additional-resources",
    "href": "syllabus.html#additional-resources",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nPython Documentation\nPandas Documentation\nPostgreSQL Documentation\nSQLBolt\nDataLemur for SQL interview practice\nGithub Guides"
  },
  {
    "objectID": "syllabus.html#module-01-introduction-to-python-jupyter-and-github",
    "href": "syllabus.html#module-01-introduction-to-python-jupyter-and-github",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Module 01: Introduction to Python, Jupyter, and GitHub",
    "text": "Module 01: Introduction to Python, Jupyter, and GitHub\n\nWednesday, August 28:\n\nSyllabus and course repository: https://github.com/danilofreire/qtm151.\nLecture 01: Welcome to QTM 151 - Introduction.\nCourse Tutorials: How to Install Anaconda, Jupyter, PostgreSQL, VSCode, and Open a Free Educational Account on GitHub.\n\nWeekly suggested readings:\n\nDataCamp: SQL vs Python: Which Should You Learn? (Note: both!)\nCao, L. (2017). Data Science: A Comprehensive Overview. ACM Computing Surveys (CSUR), 50(3), 1-42.\nBrady, H. E. (2019). The Challenge of Big Data and Data Science. Annual Review of Political Science, 22(1), 297-323.\nZitnik, M., Nguyen, F., Wang, B., Leskovec, J., Goldenberg, A., & Hoffman, M. M. (2019). Machine Learning for Integrating Data in Biology and Medicine: Principles, Practice, and Opportunities. Information Fusion, 50, 71-91.\n\n\n\nMonday, September 02: Labour Day (no class)\n\n\nWednesday, September 04:\n\nLecture 02: GitHub Review and Introduction to Jupyter Notebooks.\nAssignment 01: Problem Set 01.\n\nWeekly suggested readings:\n\nMicrosoft: Jupyter Notebooks in VSCode.\nVanderPlas, J. (2016). Python Data Science Handbook: Essential Tools for Working with Data. O’Reilly Media. Chapter 01: IPython: Beyond Normal Python.\nMcKinney, W. (2022). Python for Data Analysis: Data Wrangling with Pandas, NumPy, and IPython (3rd ed.). O’Reilly Media. Chapter 02: Python Language Basics, IPython, and Jupyter Notebooks.\nCorey Schafer: Jupyter Notebook Tutorial - Introduction, Setup, and Walkthrough. (Note: Corey Schafer is a great Python instructor on YouTube. Check out his other videos as well.)\nMarkdown Guide."
  },
  {
    "objectID": "syllabus.html#module-02-python-data-types-and-controlling-flows",
    "href": "syllabus.html#module-02-python-data-types-and-controlling-flows",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Module 02: Python Data Types and Controlling Flows",
    "text": "Module 02: Python Data Types and Controlling Flows\n\nMonday September 09:\n\nLecture 03: Variables and Lists.\n\n\n\nWednesday, September 11:\n\nLecture 04: Mathematical Operations, Arrays, and Random Numbers.\nAssignment 01 due (5%).\nAssignment 02: Problem Set 02.\n\nWeekly suggested readings:\n\nReal Python: Python Data Types.\nPython Documentation: An Informal Introduction to Python.\nNumPy Documentation: Quickstart Tutorial.\nProgramiz: Math Operations in Python.\nMatthes, E. (2019). Python Crash Course: A Hands-On, Project-Based Introduction to Programming (2nd ed.). No Starch Press. Chapter 02.\nSeverance, C. (2016). Python for Everybody: Exploring Data in Python 3. CreateSpace Independent Publishing Platform. Chapters 3-11 (Note: Read only the chapters which interest you).\n\n\n\nMonday, September 16:\n\nLecture 05: Boolean Variables and If/Else Statements.\n\n\n\nWednesday, September 18:\n\nLecture 06: While Loops and For Loops.\nAssignment 02 due (5%).\nAssignment 03: Problem Set 03.\n\nWeekly suggested readings:\n\nReal Python: Conditional Statements in Python.\nPython Official Documentation: More Control Flow Tools.\nPython Official Documentation: Compound Statements.\nReal Python: Python ‘while’ Loops (Indefinite Iteration).\nReal Python: Python ‘for’ Loops (Definite Iteration).\nW3Schools: Python While Loops.\nSweigart, A. (2019). Automate the Boring Stuff with Python: Practical Programming for Total Beginners (2nd ed.). No Starch Press. Chapter 02: Flow Control."
  },
  {
    "objectID": "syllabus.html#module-03-writing-and-running-functions",
    "href": "syllabus.html#module-03-writing-and-running-functions",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Module 03: Writing and Running Functions",
    "text": "Module 03: Writing and Running Functions\n\nMonday, September 23:\n\nLecture 07: Applications 1: Simulation Studies.\n\n\n\nWednesday, September 25:\n\nLecture 08: Functions and Arguments.\nAssignment 03 due (5%).\nAssignment 04: Problem Set 04.\n\nWeekly suggested readings:\n\nNumPy Random Module Tutorial.\nPython Functions.\nReal Python: Defining Functions in Python.\nPython Tutorial for Beginners: Functions.\n\n\n\nMonday, September 30:\n\nLecture 09: Global and Local Variables.\n\n\n\nWednesday, October 02:\n\nLecture 10: Quiz 01: Application 02 - Operations over Multiple Datasets (6%).\nAssignment 05: Problem Set 05.\n\n\n\nFriday, October 04: (exceptionally)\n\nAssignment 04 due (5%).\n\nWeekly suggested readings:\n\nProgramiz: Python Variable Scope (With Examples).\nNumPy Documentation: Indexing on ndarrays.\nPandas Documentation: How do I Select a Subset of a DataFrame?.\n\n\n\nMonday, October 07:\n\nLecture 11: Subsetting Data.\n\nWeekly suggested readings:\n\nMcKinney, W. (2022). Python for Data Analysis: Data Wrangling with Pandas, NumPy, and IPython (3rd ed.). O’Reilly Media. Chapter 05: Getting Started with Pandas.\nVanderPlas, J. (2016). Python Data Science Handbook: Essential Tools for Working with Data. O’Reilly Media. Section 3.2: Data Indexing and Selection.\nReal Python: Linear Regression in Python\nTowards Data Science: Linear Regression in Python.\nSheppard, K. (2023). Introduction to Python for Econometrics, Statistics and Data Analysis (5th ed.). University of Oxford. Chapter 21: Statistical Analysis with statsmodels."
  },
  {
    "objectID": "syllabus.html#module-04-data-manipulation-with-pandas",
    "href": "syllabus.html#module-04-data-manipulation-with-pandas",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Module 04: Data Manipulation with Pandas",
    "text": "Module 04: Data Manipulation with Pandas\n\nWednesday, October 09:\n\nLecture 12: Application 03: Linear Models.\nAssignment 05 due (5%).\nAssignment 06: Problem Set 06.\n\n\n\nMonday, October 14: Fall Break (no class)\n\n\nWednesday, October 16:\n\nLecture 13: Creating and Replacing Variables.\nAssignment 06 due (5%).\nAssignment 07: Problem Set 07.\n\nWeekly suggested readings:\n\nPython for Data Analysis: Data Cleaning and Preparation.\nCodedamn: How to use the Replace function in Python.\n\n\n\nMonday, October 21:\n\nLecture 14: Quiz 2: Application 4: Random Assignment (6%).\n\n\n\nWednesday, October 23:\n\nLecture 15: Aggregating Data.\nAssignment 07 due (5%).\nAssignment 08: Problem Set 08.\n\nWeekly suggested readings:\n\nVanderPlas, J. (2016). Python Data Science Handbook: Essential Tools for Working with Data. O’Reilly Media. Chapter 3: Data Manipulation with Pandas.\nMcKinney, W. (2022). Python for Data Analysis: Data Wrangling with Pandas, NumPy, and IPython (3rd ed.). O’Reilly Media. Chapter 07: Data Cleaning and Preparation.\nDataCamp: Pandas Tutorial: DataFrames in Python.\nReal Python: Pandas Tutorial: DataFrames in Python."
  },
  {
    "objectID": "syllabus.html#module-05-data-manipulation-with-sql",
    "href": "syllabus.html#module-05-data-manipulation-with-sql",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Module 05: Data Manipulation with SQL",
    "text": "Module 05: Data Manipulation with SQL\n\nMonday, October 28:\n\nLecture 16: Merging Data.\n\n\n\nWednesday, October 30:\n\nLecture 17: Introduction to SQL.\nAssignment 08 due (5%).\nAssignment 09: Problem Set 09.\nInstructions for the Final Project: Final Project.\n\nWeekly suggested readings:\n\nMode Analytics: SQL Tutorial.\nReal Python: SQL Databases and SQLite.\nKhan Academy: SQL Basics. (Note: Khan Academy is a great resource for learning SQL and other programming languages).\nCoursera: PostgreSQL for Everybody.\nPostgreSQL Tutorial.\nPostgreSQL Documentation: SQL Commands. (Note: For reference only).\n\n\n\nMonday, November 04:\n\nLecture 18: Quiz 3: Application 5: Practicing Chaining (6%).\n\n\n\nWednesday, November 06:\n\nLecture 19: Import SQL Data into Python.\nAssignment 09 due (5%).\nAssignment 10: Problem Set 10.\n\nWeekly suggested readings:\n\nPandas Documentation: SQL Databases.\nReal Python: Working with SQLite Databases Using Python and Pandas.\nMode Analytics: SQL Joins.\nPostgreSQL Documentation: Joins Between Tables."
  },
  {
    "objectID": "syllabus.html#module-06-time-series-and-panel-data",
    "href": "syllabus.html#module-06-time-series-and-panel-data",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Module 06: Time Series and Panel Data",
    "text": "Module 06: Time Series and Panel Data\n\nMonday, November 11:\n\nLecture 20: Merging Tables in SQL.\n\n\n\nWednesday, November 13:\n\nLecture 21: Time Series Analysis.\nAssignment 10 due (5%).\n\nWeekly suggested readings:\n\nW3 School: SQL Joins.\nVanderPlas, J. (2016). Python Data Science Handbook: Essential Tools for Working with Data. O’Reilly Media. Section 3.11: Working with Time Series.\nMcKinney, W. (2022). Python for Data Analysis: Data Wrangling with Pandas, NumPy, and IPython (3rd ed.). O’Reilly Media. Chapter 11: Time Series.\nPandas Documentation: Time Series / Date functionality.\n\n\n\nMonday, November 18:\n\nLecture 22: Quiz 4: Application 6: Practice SQL Queries (6%).\n\n\n\nWednesday, November 20:\n\nLecture 23: Pivot Tables.\n\nWeekly suggested readings:\n\nVanderPlas, J. (2016). Python Data Science Handbook: Essential Tools for Working with Data. O’Reilly Media. Section 3.9: Pivot Tables.\nPandas Documentation: Reshaping and Pivot Tables.\nAnalytics Vidhya: Create Pivot Table Using Pandas in Python.\nReal Python: How to Create Pivot Tables With pandas."
  },
  {
    "objectID": "syllabus.html#module-07-text-data-and-advanced-plots",
    "href": "syllabus.html#module-07-text-data-and-advanced-plots",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Module 07: Text Data and Advanced Plots",
    "text": "Module 07: Text Data and Advanced Plots\n\nMonday, November 25:\n\nLecture 24: Quiz 5: Application 8: Time Data, Panel Data, and Plots (6%).\n\n\n\nWednesday, November 27: Thanksgiving Break (no class)\n\n\nMonday, December 02:\n\nLecture 25: Manipulating Text Data.\n\n\n\nWednesday, December 04:\n\nLecture 26: Advanced Plots.\n\nWeekly suggested readings:\n\nReal Python: Python String Formatting Best Practices.\n\n\n\nMonday, December 09:\n\nFinal Project due (20%)."
  },
  {
    "objectID": "lectures/LICENSE.html",
    "href": "lectures/LICENSE.html",
    "title": "MIT License",
    "section": "",
    "text": "Copyright (c) 2024 Danilo Freire\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n Back to top"
  },
  {
    "objectID": "lectures/lecture-01/LICENSE.html",
    "href": "lectures/lecture-01/LICENSE.html",
    "title": "MIT License",
    "section": "",
    "text": "Copyright (c) 2024 Danilo Freire\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n Back to top"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#lecture-overview",
    "href": "lectures/lecture-01/01-introduction.html#lecture-overview",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Lecture Overview",
    "text": "Lecture Overview\n\n\nIntroduction\nMotivation\nClass Logistics\nComputing Set up"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#course-materials",
    "href": "lectures/lecture-01/01-introduction.html#course-materials",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Course Materials",
    "text": "Course Materials\nImportant Links\n\n Course repository: https://github.com/danilofreire/qtm151\n Course website: https://danilofreire.github.io/qtm151\nThis course is hosted on GitHub, where you will find lecture materials, code samples, our discussion space, assignments, and final project instructions. Canvas will be used for course management, including assignment submissions, grades, and announcements. Please familiarise yourself with both platforms, and reach out if you have any questions.\n\n\n\n\n\n\nNote\n\n\nPlease remember to check the course website regularly for updates and announcements."
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#instructor",
    "href": "lectures/lecture-01/01-introduction.html#instructor",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Instructor",
    "text": "Instructor\nA bit about me\n\n\n\n\n danilo.freire@emory.edu\n https://danilofreire.github.io/\n\n\n\n Visiting Assistant Professor in the QTM\n MA from the Graduate Institute Geneva, PhD from King’s College London, Postdoc at Brown University, Senior Lecturer at the University of Lincoln, UK.\n Research interests: computational social science, experimental methods, policy evaluation, political violence, organised crime."
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#my-teaching-philosophy",
    "href": "lectures/lecture-01/01-introduction.html#my-teaching-philosophy",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "My teaching philosophy",
    "text": "My teaching philosophy\nWhat you can expect from me\n\n\nI love teaching and aim to make learning fun\nClasses where students participate are the best\nHands-on activities help you learn better\nI am always available to help and answer questions. And I mean it\nYour feedback helps me improve my teaching. Please let me know what is working and what is not"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#teaching-assistants",
    "href": "lectures/lecture-01/01-introduction.html#teaching-assistants",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Teaching assistants",
    "text": "Teaching assistants\n\n\nThe teaching assistants for this course will be confirmed soon\nThey will be answering questions during our lectures and holding office hours (see Canvas or the course website for office hours information)\nThey will also be grading your assignments and quizzes (with my oversight)\nWe are all here to help you! So feel free to ask questions during class, office hours, or via email 😊"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#office-hours-what-for-and-what-not-for",
    "href": "lectures/lecture-01/01-introduction.html#office-hours-what-for-and-what-not-for",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Office hours: What for and what not for",
    "text": "Office hours: What for and what not for\n\n\nWhat office hours are meant for:\n\nApplying tools in practice\nDiscussion of issues related to the assignments\nBoosting your knowledge of data science\n\n\n\n\nWhat these sessions are not meant for:\n\nSolving the assignments for you\nTaking care of developing your coding skills"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#class-etiquette",
    "href": "lectures/lecture-01/01-introduction.html#class-etiquette",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Class etiquette",
    "text": "Class etiquette\n\n\n\nCoding can be tough and push you out of your comfort zone. If the course pace is too fast, let us know. I expect your commitment, but I do not want anyone to fail\nYou are all keen on data science, but your backgrounds vary. That is great! Some sessions might be more engaging than others. If you are bored, help others or explore new data science areas\nAlways be respectful to each other\nAsk questions whenever you need to!"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#why-python",
    "href": "lectures/lecture-01/01-introduction.html#why-python",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Why Python",
    "text": "Why Python\nThe world’s most popular programming language"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#why-python-1",
    "href": "lectures/lecture-01/01-introduction.html#why-python-1",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Why Python",
    "text": "Why Python\nGreat community and easy to learn\n\n\nThere are thousands of Python user groups worldwide\nThe Python community is very active and welcoming! \n\n\nJava:\n\n\npublic class Welcome {\n    public static void main(String[] args) {\n        System.out.println(\"Welcome to QTM151!\");\n    }\n}\n\n\nPython:\n\n\nprint(\"Welcome to QTM151!\")"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#why-python-2",
    "href": "lectures/lecture-01/01-introduction.html#why-python-2",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Why Python",
    "text": "Why Python\nSalaries are good!"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#why-sql",
    "href": "lectures/lecture-01/01-introduction.html#why-sql",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Why SQL",
    "text": "Why SQL\nThe world’s most popular database language\n\n\n\nSQL is the standard language for relational database management systems\nEasy to learn\nStandardised\nManage huge amounts of data\nWidely used in industry\nGreat for data analysis"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#why-sql-1",
    "href": "lectures/lecture-01/01-introduction.html#why-sql-1",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Why SQL",
    "text": "Why SQL\nSalaries are good too!"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#course-objectives",
    "href": "lectures/lecture-01/01-introduction.html#course-objectives",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Course Objectives",
    "text": "Course Objectives\n\nPerform basic operations and write functions in Python\nConduct data wrangling and manipulate data using Python libraries such as Pandas\nMerge and manage databases using SQL\nCreate visualisations to effectively communicate data insights\nImplement linear models and understand the principles of time series analysis\nUse Jupyter Notebooks for reproducible research\nDevelop problem-solving skills relevant to data analysis and statistical computing"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#grades-and-late-policy",
    "href": "lectures/lecture-01/01-introduction.html#grades-and-late-policy",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Grades and Late Policy",
    "text": "Grades and Late Policy\n\n\n\n\nAssignments (x10): 50%​\n\nPractice class concepts​\n\nQuizzes (x5): 30%​\n\nQuestions are given in advance​\nData is provided in the class​\n\nFinal Project: 20%​\n\nWill provide guidelines on Canvas​ and GitHub\nDue at the end of the semester​\n\n\n\n\n\n\nAll materials will be available on the course website​ and GitHub​ repository\nLate assignments will automatically be graded for half-credit​\nTo account for unforeseen circumstances, we will drop the worst assignment and the worst quiz​\nWatch out for the assignments to install software. You will need these to be able to use the lectures notes"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#our-class-in-a-nutshell",
    "href": "lectures/lecture-01/01-introduction.html#our-class-in-a-nutshell",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Our Class in a Nutshell",
    "text": "Our Class in a Nutshell"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#installing-python-using-anaconda",
    "href": "lectures/lecture-01/01-introduction.html#installing-python-using-anaconda",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Installing Python using Anaconda",
    "text": "Installing Python using Anaconda\nAnaconda has (almost) all the libraries we need\n\n\nFollow the instructions on our GitHub repository\nWe are using Anaconda virtual environments for this class (I will cover this in more detail next class)​\nFor now: Anaconda comes with a Python installation​\n\n\n\nQuestions?"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#installing-vscode-and-connecting-anaconda",
    "href": "lectures/lecture-01/01-introduction.html#installing-vscode-and-connecting-anaconda",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Installing VSCode and Connecting Anaconda​",
    "text": "Installing VSCode and Connecting Anaconda​\n\n\nFollow the instructions Installing Visual Studio Code and Connecting it with Anaconda from GitHub\nFor now: know that “base” is the Anaconda virtual environment that comes by default with the installation​\nThe next step is to check if the connection between VSCode and Anaconda worked -&gt; the Python: Select Interpreter option should include Python (“base”)​\nNext step: we will create a new folder for the QTM151 course and download our virtual GitHub folder and opening it in VSCode"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#jupyter-notebooks",
    "href": "lectures/lecture-01/01-introduction.html#jupyter-notebooks",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Jupyter Notebooks",
    "text": "Jupyter Notebooks\n\n\n\n\nWe will use Jupyter Notebooks for our classes. We have a tutorial on how to use them too\nJupyter Notebooks are a great way to combine code, text, and visualisations\nIt is encouraged that you bring your laptop to class\nLecture notes are designed to be follow-along. There will be many “try it yourself” exercises throughout the lectures!"
  },
  {
    "objectID": "lectures/lecture-01/01-introduction.html#next-class",
    "href": "lectures/lecture-01/01-introduction.html#next-class",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Next Class",
    "text": "Next Class\n\n\nDon’t worry if you are not able to follow along with the installation instructions. We will have time to do this next class\nWe will start with the basics of Jupyter Notebooks\nWe will also cover the basics of Anaconda and VSCode\nPlease remember to check the course repository, mainly the tutorials: https://github.com/danilofreire/qtm151\nAnd please do not forget:\n\nCoding ability can be developed\nAcademic skills and abilities are acquired through hard work, mistakes, and perseverance. Coding is no different\nMy only goal here is that you learn the material. Please ask me questions! 😊"
  },
  {
    "objectID": "lectures/lecture-02/02-jupyter.html",
    "href": "lectures/lecture-02/02-jupyter.html",
    "title": "Lecture 02: Introduction to Jupyter Notebooks",
    "section": "",
    "text": "The basic structure for running Python for data projects  - Python is a general purpose language - Researchers and practitioners add new functionalities all the time - New features are included as libraries on top of the “basic” installation\n\n\nSTEP 0: Preliminaries\n\n\nA Virtual Environment is a directory (folder in your computer)  that contains a specific collection of packages\nA package is a folder containing a set of Python scripts or  modules which allow you to accomplish a defined task  (visualisation, analysis, mathematical operations, etc.)\n\n\nTo manage packages open “Anaconda Navigator” on your  computer and go to the “Environment” Tab\n\n\nIn the future, as your data analysis needs expand,  you way want to click on the “Not installed” packages  to download cool new packages!\n\n\n\nSTEP 1: Setup Working Environment\n\nDouble Check that Python is linked to VS Code\n\n\nIf not already linked, it will say “Select Kernel”\nClick button, choose “Python Environments”, then select  the version of Python that contains the word “anaconda”\n\n\n\nImport Packages:\n\n\nJupyter notebooks launches with very basic options\nThe “import” command adds libraries to the working enviroment.\nWe can give the libraries a nickname with “as”\n\nmatplotlib allows us to do nice graphs in Python  pandas allows us to work with datasets\n\n# Notes about nicknames:\n# - For example, \"matplotlib.pyplot\" is a long name. Let's call it \"plt\"\n# - Similarly, let's call \"pandas\" as \"pd\"\n# - Try adding your own nickname!\n# - To avoid errors, be consistent with your nicknames\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\n\nOpen datasets\n\nRun the command “read_csv” from the library  “pandas” (nicknamed “pd”).\n\nprint('Hello, World!')\n\nHello, World!\n\n\n\n# You can use \".\" to run subcommands contained in a library.\n# The subcommand \"read_csv()\" opens the file in parenthesis.\n# We use the \"=\" symbol to store the dataset in the working environment under the name \"carfeatures\"\n\ncarfeatures = pd.read_csv('data/features.csv')\n\n\nYou can open the datasets in the current environment - Click on the “Variables” button in the top bar to open a panel\n\n\nDouble click on “carfeatures” in the “Jupyter: Variables” tab.\n\n\n\nEach row is an observation (a car)\nEach column is the value of a variable (a feature of that car)\n\nYou can also use a new feature from VS Code to open the dataset in a new tab. Install the Data Wrangler extension and click on the “View Data” button.\n\nYou will see the following screen:\n\n\n\n\nSTEP 2: Run Analyses\n\nOutput data for all the columns\n\n# Entering the name of a dataframe produces an output with some rows\n\ncarfeatures\n\n\n\n\n\n\n\n\nmpg\ncylinders\ndisplacement\nhorsepower\nweight\nacceleration\nvehicle id\n\n\n\n\n0\n18.0\n8\n307\n130\n3504\n12.0\nC-1689780\n\n\n1\n15.0\n8\n350\n165\n3693\n11.5\nB-1689791\n\n\n2\n18.0\n8\n318\n150\n3436\n11.0\nP-1689802\n\n\n3\n16.0\n8\n304\n150\n3433\n12.0\nA-1689813\n\n\n4\n17.0\n8\n302\n140\n3449\n10.5\nF-1689824\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n393\n27.0\n4\n140\n86\n2790\n15.6\nF-1694103\n\n\n394\n44.0\n4\n97\n52\n2130\n24.6\nV-1694114\n\n\n395\n32.0\n4\n135\n84\n2295\n11.6\nD-1694125\n\n\n396\n28.0\n4\n120\n79\n2625\n18.6\nF-1694136\n\n\n397\n31.0\n4\n119\n82\n2720\n19.4\nC-1694147\n\n\n\n\n398 rows × 7 columns\n\n\n\n\nOutput data for a single column ‘cylinders’\n\n# We use square brackets [...] to subset information from data \n# Text/strings have to be written in quotation marks\n# This command extracts the column 'cylinders'\n\ncarfeatures['cylinders']\n\n0      8\n1      8\n2      8\n3      8\n4      8\n      ..\n393    4\n394    4\n395    4\n396    4\n397    4\nName: cylinders, Length: 398, dtype: int64\n\n\n\nExample: Compute a frequency table\n\n# crosstab counts how many rows fall into categories\n# \"index\" is the category\n# \"columns\" is a custom title\n\ntable = pd.crosstab(index = carfeatures['cylinders'], columns = \"count\")\ntable\n\n\n\n\n\n\n\ncol_0\ncount\n\n\ncylinders\n\n\n\n\n\n3\n4\n\n\n4\n204\n\n\n5\n3\n\n\n6\n84\n\n\n8\n103\n\n\n\n\n\n\n\n\ntable.columns.name\n\n'col_0'\n\n\n\ntable.columns.name = 'column name'\ntable\n\n\n\n\n\n\n\ncolumn name\ncount\n\n\ncylinders\n\n\n\n\n\n3\n4\n\n\n4\n204\n\n\n5\n3\n\n\n6\n84\n\n\n8\n103\n\n\n\n\n\n\n\n\n# Try the command again but this time change the column name to something more interesting!\n\n\nExample: Compute basic summary statistics for all variables\n\n# \"describe\" computes the count, mean, std, min, 25% quantile, 50%, 75%, max\n# automatically excludes variables with text values\n# otherwise includes all numeric variables\n\ncarfeatures.describe()\n\n\n\n\n\n\n\n\nmpg\ncylinders\ndisplacement\nweight\nacceleration\n\n\n\n\ncount\n398.000000\n398.000000\n398.000000\n398.000000\n398.000000\n\n\nmean\n23.514573\n5.454774\n193.427136\n2970.424623\n15.568090\n\n\nstd\n7.815984\n1.701004\n104.268683\n846.841774\n2.757689\n\n\nmin\n9.000000\n3.000000\n68.000000\n1613.000000\n8.000000\n\n\n25%\n17.500000\n4.000000\n104.250000\n2223.750000\n13.825000\n\n\n50%\n23.000000\n4.000000\n148.500000\n2803.500000\n15.500000\n\n\n75%\n29.000000\n8.000000\n262.000000\n3608.000000\n17.175000\n\n\nmax\n46.600000\n8.000000\n455.000000\n5140.000000\n24.800000\n\n\n\n\n\n\n\n\nExample: Display a scatter plot\n\nplt.scatter(x = carfeatures['weight'], y = carfeatures['mpg'])\nplt.show()\n\n\n\n\n\n\n\n\n\n# Try another scatter plot with x = \"acceleration\"\n\n\n\n\nPro Tips: How to be a great student for QTM 151?\n\n\nPlease ask clarifying questions and remember to use the GitHub Discussions tab if you have any questions: https://github.com/danilofreire/qtm151/discussions\n\nCan you explain what this command is doing? –&gt; I don’t mind repeating an explanation!\nWhat are the arguments of this function?\nWhat is the output?\nI get an error saying …. (be explicit), what could be the issue?\n\n\n\n\nRemember that good coders …\n\nbuild up their toolkit of commands over time\nunderstand that errors are normal the first time you run a command\nlearn to use online websites to interpret errors!!, https://stackoverflow.com/questions/tagged/python\nsearch help pages to find proper syntax, e.g. https://www.w3schools.com/python/\n\n\n\n\nExperiment\n\nIf we do analyses for variable “A”, try it for “B”\nSearch online how to do something extra, e.g. change the color of a scatter plot\nTry running the syntax deliberately wrong: helps you figure out the right logic\nThink long term: Figuring out a puzzle today, means that you can use the code for the next time!\n\n\n\n\nCome to office hours\n\nBest time for a one-on-one!\nGood place to ask about topics not covered in the lecture\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "MIT License",
    "section": "",
    "text": "Copyright (c) 2024 Danilo Freire\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n Back to top"
  },
  {
    "objectID": "tutorials/tutorials.html",
    "href": "tutorials/tutorials.html",
    "title": "Tutorials",
    "section": "",
    "text": "Below you will find a list of available tutorials with instructions on how to install and use the tools we will be using in class."
  },
  {
    "objectID": "tutorials/tutorials.html#available-tutorials",
    "href": "tutorials/tutorials.html#available-tutorials",
    "title": "Tutorials",
    "section": "Available Tutorials",
    "text": "Available Tutorials\n\n01 - VSCode and Anaconda Tutorial\n02 - Jupyter Notebook and Markdown Tutorial\n03 - GitHub Tutorial\n04 - PostgreSQL Tutorial\n\nPDF versions of the tutorials are also available on GitHub: https://github.com/danilofreire/qtm151/tree/main/tutorials."
  },
  {
    "objectID": "tutorials/tutorials.html#additional-resources",
    "href": "tutorials/tutorials.html#additional-resources",
    "title": "Tutorials",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nFurther examples\n\npython-postgresql-example.ipynb: A Jupyter Notebook with a PostgreSQL example\ntesting-ipython.ipynb: A Jupyter Notebook for showing Markdown and code cells\ntesting-anaconda.py: A Python script for testing Anaconda installation\n\n\n\nSuggested Books\n\nPython for Data Analysis by Wes McKinney\nElements of Data Science by Allen Downey\nAutomate the Boring Stuff with Python by Al Sweigart\nPython for Everybody by Charles Severance\nSQL for Data Scientists by Renee M. P. Teate\n\n\n\nOnline Courses\n\nCoursera: Python for Everybody Specialisation\nedX: Python Basics for Data Science\nCodecademy: Learn Python\nDataCamp: Introduction to SQL\nCoursera: SQL for Data Science\n\n\n\nDocumentation\n\nPython Documentation\nPandas Documentation\nPostgreSQL Documentation\nSQLBolt\nGithub Guides\n\nFor any questions or issues regarding these tutorials, please open a GitHub issue, submit a pull request, or create a discussion post.\nPlease do not forget that, in addition to the tutorials here, the course syllabus also contains a list of recommended weekly readings and additional resources.\nI hope you like the tutorials and find them useful!"
  },
  {
    "objectID": "tutorials/03-github-tutorial.html",
    "href": "tutorials/03-github-tutorial.html",
    "title": "GitHub Tutorial",
    "section": "",
    "text": "This tutorial will guide you through the process of creating a GitHub educational account, downloading and installing GitHub Desktop, and downloading the course materials from GitHub to your computer. The tutorial also covers the basics of Git and GitHub, such as creating a repository, committing changes, and pushing changes to GitHub. It will also show you how to use VS Code to edit and manage your code on GitHub. You can use any tool you prefer to version control your code."
  },
  {
    "objectID": "tutorials/03-github-tutorial.html#footnotes",
    "href": "tutorials/03-github-tutorial.html#footnotes",
    "title": "GitHub Tutorial",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAs a curiosity, the code for the Apollo 11 mission is also available on GitHub.↩︎\nThe default branch in GitHub is called main. This is the branch where you will make most of your changes. You can create other branches if you want to work on different features or bug fixes.↩︎"
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html",
    "href": "tutorials/02-jupyter-markdown-tutorial.html",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "",
    "text": "This tutorial will introduce you to Jupyter Notebook and Markdown. Jupyter Notebook is an interactive computing platform that allows users to create and share documents that contain live code, equations, visualisations, and narrative text. Markdown is a lightweight markup language that is used to format text, and can be used for everything - websites, documents, notes, books, presentations, email messages, and technical documentation. Even WhatsApp and Facebook Messenger use Markdown to format messages. So if you have already italicised a word or made a text bold on WhatsApp, you have used Markdown!\nThis tutorial is divided into two parts. The first part will introduce you to Jupyter Notebook and show you how to create a new notebook, run code cells, and format text cells using Markdown. The second part will provide a more in-depth look at Markdown and show you how to create headings, lists, links, images, and tables."
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html#what-is-jupyter-notebook",
    "href": "tutorials/02-jupyter-markdown-tutorial.html#what-is-jupyter-notebook",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "What is Jupyter Notebook?",
    "text": "What is Jupyter Notebook?\nJupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. Jupyter Notebook supports over 40 programming languages, including Python, R, and Julia. Jupyter Notebook is widely used in data science, machine learning, scientific computing, and other fields.\nJupyter Notebooks provide an interactive development environment that allows you to write and execute code, see the results immediately, and create reproducible analyses. Jupyter Notebooks are organized into cells, which can contain code, text, equations, or visualisations. You can run individual cells or the entire notebook, and you can save your work as a notebook file (.ipynb) that can be shared with others."
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html#creating-a-new-notebook",
    "href": "tutorials/02-jupyter-markdown-tutorial.html#creating-a-new-notebook",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Creating a New Notebook",
    "text": "Creating a New Notebook\nFirst, please make sure you have Python, Jupyter Notebook, and VSCode installed on your computer. If you do not have these installed, please refer to the VSCode and Anaconda Tutorial for instructions on how to install them.\nTo create a new Jupyter Notebook in VSCode, please go to the tab “File” &gt; “New File”. You will see a prompt in the middle of the screen. Select the option “Jupyter Notebook”.\n\n\n\nCreating a new Jupyter Notebook in VSCode.\n\n\nA new Jupyter Notebook will be created with the file extension .ipynb. You can rename the notebook by clicking on the notebook name at the top of the screen. An empty notebook will look like this:\n\n\n\nAn empty Jupyter Notebook.\n\n\nPlease do not forget to select the Python interpreter that you want to use for the notebook. You can do this by clicking on the Python version at the top right corner of the screen. A prompt will appear, and you can select the Python interpreter that you want to use (in this case, Anacoda’s “base”).\n\n\n\nSelecting the Python interpreter for the notebook.\n\n\nTo create a chunk of Python code click on “+ Code.” You will get an empty gray box which has Python on the lower-right corner. You can type Python code in this box and run it by clicking on the “Run” button on the left side of the box. You can also run the code by pressing “Shift + Enter” on your keyboard.\n\n\n\nA code cell in a Jupyter Notebook.\n\n\nHere you should enter the Python commands. For example, type the following lines of code in the code cell:\n\nprint(\"Welcome to QTM 151!\")\n\nx = 5\ny = 10\nz = x + y\nprint(z)\n\nThe results of the code will be displayed below the code cell. In this case, the output will be:\n\n\n\nOutput of the code cell.\n\n\nTo create a text cell click on “+ Markdown.” You will get an empty white box where you can type text. We will cover Markdown in more detail in the next section. But for now, you can type the following text in the Markdown cell:\n# Welcome to QTM 151!\n\nThis is a Jupyter Notebook. You can write *text*, **equations**, and `code` \nin [this notebook](https://github.com/danilofreire/qtm151/blob/main/tutorials/testing-ipython.ipynb). \nThe text will be displayed in the text cell like this:\n\n\n\nA text cell in a Jupyter Notebook.\n\n\nYou can run the text cell by clicking the “Run” button on the left side of the box or by pressing “Shift + Enter” on your keyboard. The first text block shows how the text looks before running the cell, and the second block shows how it looks after running the cell. Just double click on the space where the text is to edit the Markdown block. This is should open the gray box again."
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html#why-use-markdown",
    "href": "tutorials/02-jupyter-markdown-tutorial.html#why-use-markdown",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Why Use Markdown?",
    "text": "Why Use Markdown?\nMarkdown is a great way to format text because it is simple, easy to learn, and widely supported. You can use Markdown to create headings, lists, tables, equations, and figures in your documents. Markdown is used in many different applications, including Jupyter Notebook, GitHub, and Slack. Learning Markdown will help you create well-formatted documents that are easy to read and share."
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html#headings",
    "href": "tutorials/02-jupyter-markdown-tutorial.html#headings",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Headings",
    "text": "Headings\nYou can create headings using the # symbol. For example, # Heading 1 creates a first-level heading, ## Heading 2 creates a second-level heading, and so on. You can create up to six levels of headings using the # symbol.\n# Heading 1\n## Heading 2\n### Heading 3"
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html#lists",
    "href": "tutorials/02-jupyter-markdown-tutorial.html#lists",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Lists",
    "text": "Lists\nTo create an ordered list with nested unordered sub-items in Markdown, you can write the following code:\n1. This is an ordered list.\n2. This is the second item in the ordered list.\n  - This is a sub-item in the unordered list.\n    - This is a sub-sub-item in the unordered list.\n\nThis is an ordered list.\nThis is the second item in the ordered list.\n\nThis is a sub-item in the unordered list.\n\nThis is a sub-sub-item in the unordered list.\n\n\n\nYou can also create unordered lists:\n- This is an unordered list.\n- This is the second item in the unordered list.\n  - This is a sub-item in the unordered list.\n\nThis is an unordered list.\nThis is the second item in the unordered list.\n\nThis is a sub-item in the unordered list."
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html#tables",
    "href": "tutorials/02-jupyter-markdown-tutorial.html#tables",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Tables",
    "text": "Tables\nYou can create tables using the | symbol. For example:\nTable: Your Caption \n\n| A            | New              | Table          |\n|:-------------|:----------------:|---------------:|\n|left-aligned  |centre-aligned    |right-aligned   |\n|*italics*     |~~strikethrough~~ |**boldface**    |\n\nYour Caption\n\n\nA\nNew\nTable\n\n\n\n\nleft-aligned\ncentre-aligned\nright-aligned\n\n\nitalics\nstrikethrough\nboldface\n\n\n\nThe : symbols in the second row of the table determine the alignment of the text in each column. You can use left, center, or right to align the text."
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html#creating-markdown-tables-from-pandas-dataframes-in-jupyter-notebooks",
    "href": "tutorials/02-jupyter-markdown-tutorial.html#creating-markdown-tables-from-pandas-dataframes-in-jupyter-notebooks",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Creating Markdown Tables from Pandas DataFrames in Jupyter Notebooks",
    "text": "Creating Markdown Tables from Pandas DataFrames in Jupyter Notebooks\nWhen working with pandas DataFrames, you can convert them into Markdown tables for better presentation. The method is also relatively simple. Here is how to do it:\n\nPrerequisites\nEnsure you have the following installed:\n\nJupyter Notebook\npandas\ntabulate (for enhanced table formatting)\n\nJupyter Notebook and pandas are included in the Anaconda distribution. You can install tabulate using conda install in your terminal. If you are using VS Code, you can open a terminal by clicking on “Terminal” &gt; “New Terminal” in the top menu. Then run the following command:\nconda install tabulate\n\n\nBasic Method: Using pandas.DataFrame.to_markdown()\npandas provides a built-in method to_markdown() for converting DataFrames to Markdown tables.\n\nStep 1: Import pandas and create a DataFrame\nYou can create a dataframe by passing a dictionary to the pd.DataFrame() constructor:\n\n# If necessary, install pandas and tabulate \n# You should have pandas installed if you installed Anaconda, \n# but if you do not, you can install both with the following terminal command:\n# conda install pandas tabulate\n\n# Import pandas\nimport pandas as pd\nfrom tabulate import tabulate\n\n# Create a sample DataFrame\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [25, 30, 35],\n    \"City\": [\"New York\", \"London\", \"Paris\"]\n}\ndf = pd.DataFrame(data)\n\n\n\nStep 2: Convert DataFrame to Markdown\nThen you just need to call the to_markdown() method on the DataFrame:\n\n# Print the DataFrame as a Markdown table, excluding the index\nmarkdown_table = df.to_markdown(index=False)\nprint(markdown_table)\n\nThis will output:\n| Name    | Age  | City     |\n|:--------|-----:|:---------|\n| Alice   |   25 | New York |\n| Bob     |   30 | London   |\n| Charlie |   35 | Paris    |\n\n\nStep 3: Display in Jupyter Notebook\nTo display the Markdown table in a Jupyter Notebook cell, use the display() function from the IPython.display module:\n\n# You should also have the IPython package installed if you installed Anaconda\n# If not, you can install it with\n# conda install ipython\n\n# Import the Markdown display class. \n# This is what allows us to display Markdown in Jupyter Notebooks \nfrom IPython.display import display, Markdown\n\n# Display the Markdown table\ndisplay(Markdown(markdown_table))\n\nThis will render a nicely formatted table in your notebook:\n\n\n\nMarkdown table in a Jupyter Notebook.\n\n\n\n\n\nAdvanced Formatting\nYou can customise the Markdown table using various parameters of to_markdown():\n\n# Customising the Markdown table using the to_markdown() method\nmarkdown_table = df.to_markdown(\n    index=False,  # Don't include index\n    tablefmt=\"pipe\",  # Use pipe format\n    floatfmt=\".2f\",  # Format floats to 2 decimal places\n    headers=[\"Name\", \"Age (Years)\", \"City\"],  # Custom headers\n    colalign=(\"left\", \"center\", \"right\")  # Align columns\n)\ndisplay(Markdown(markdown_table))\n\n\n\nUsing tabulate for Enhanced Formatting\nThe tabulate library offers even more formatting options. While they are not necessary for basic tables, they can be useful for more complex tables. In our course, you will probably not need them, but I will show you how to use them for your reference. Please check their documentation for more information.\n\nfrom tabulate import tabulate\n\nmarkdown_table = tabulate(df, headers='keys', tablefmt='pipe', showindex=False)\ndisplay(Markdown(markdown_table))\n\n\n\nBest Practices\n\nIndex: Consider whether you need the index in your table. Often, it is cleaner to exclude it using index=False.\nFormatting: Use floatfmt to control decimal places for numerical data.\nHeaders: Customize headers for clarity, especially if your DataFrame column names are not user-friendly.\nTable Format: Experiment with different tablefmt options to find the most suitable for your needs.\nLarge DataFrames: For large DataFrames, consider displaying only a subset of rows or columns to maintain readability.\n\n\n\nExample: Comprehensive Table Creation\nHere is a more comprehensive example incorporating various best practices:\n\n# Import necessary packages\nimport pandas as pd\nfrom IPython.display import display, Markdown\nfrom tabulate import tabulate\n\n# Create a sample DataFrame\ndata = {\n    \"Product\": [\"Laptop\", \"Smartphone\", \"Tablet\"],\n    \"Price\": [999.99, 599.50, 299.75],\n    \"Stock\": [50, 100, 75],\n    \"Rating\": [4.5, 4.8, 4.2]\n}\ndf = pd.DataFrame(data)\n\n# Create a formatted Markdown table\nmarkdown_table = tabulate(\n    df,\n    headers=[\"Product Name\", \"Price ($)\", \"Stock Quantity\", \"Customer Rating\"],\n    tablefmt=\"pipe\", # Format as Markdown table\n    floatfmt=(\".2f\", \".2f\", \"d\", \".1f\"),\n    showindex=False, # Don't show the index (row numbers)\n    numalign=\"right\", # Align numbers to the right\n    stralign=\"left\" # Align strings (text, first column) to the left\n)\n\n# Display the table in the notebook\ndisplay(Markdown(\"### Product Inventory Summary\"))\ndisplay(Markdown(markdown_table))\n\nThis will produce a well-formatted table with custom headers, appropriate number formatting, and a title.\n\n\n\nComprehensive Markdown table in a Jupyter Notebook."
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html#equations",
    "href": "tutorials/02-jupyter-markdown-tutorial.html#equations",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Equations",
    "text": "Equations\nYou can create equations using the $$ symbol. For example in Equation 1, we have the formula for the standard deviation of a population:\n$$\n\\sigma = \\sqrt{\\frac{\\sum_{i=1}^{N} (x_i - \\mu)^2}{N}}\n$$ {#eq-stddev}\n\\[\n\\sigma = \\sqrt{\\frac{\\sum_{i=1}^{N} (x_i - \\mu)^2}{N}}\n\\tag{1}\\]\nYou can also create equations inline by using the $ symbol. For example, $\\alpha = \\beta + \\gamma$ will render as \\(\\alpha = \\beta + \\gamma\\). To learn more about how to write equations in using Markdown, you can refer to the Overleaf documentation."
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html#figures",
    "href": "tutorials/02-jupyter-markdown-tutorial.html#figures",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Figures",
    "text": "Figures\nYou can include figures in your document using the ![Caption](path/to/image.png){#fig-label} syntax. For example:\n![This is a figure caption.](path/to/image.png){#fig-label}\nThis will include the image path/to/image.png in your document with the caption “This is a figure caption.” You can refer to the figure using the label fig-label, but this is optional.\nIf you are creating plots on Jupyter Notebook, the graphs will appear after the code cell that generates them."
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html#citations",
    "href": "tutorials/02-jupyter-markdown-tutorial.html#citations",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Citations",
    "text": "Citations\nAlthough Markdown has excellent reference support with BibTeX files, there is no reliable way to include citations automatically in Jupyter Notebooks. The two packages I know that manage citations, cite2c and Jupyterlab Citation Manager, are not ideal. The first has not been maintained for years, while the second is not ready for most uses. Therefore, I suggest simply copying the citation from Google Scholar and pasting it into a Markdown cell titled “References” at the end of your document. The same approach applies for inline citations."
  },
  {
    "objectID": "tutorials/02-jupyter-markdown-tutorial.html#footnotes",
    "href": "tutorials/02-jupyter-markdown-tutorial.html#footnotes",
    "title": "Jupyter Notebook and Markdown Tutorial",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis is an inline footnote.↩︎\nYou can also include multiple paragraphs in a footnote by indenting the subsequent paragraphs.↩︎"
  },
  {
    "objectID": "tutorials/python-postgresql-example.html",
    "href": "tutorials/python-postgresql-example.html",
    "title": "PostgreSQL Example",
    "section": "",
    "text": "Here is an example of how to use PostgreSQL with Python. The example uses the psycopg2 library to connect to a PostgreSQL database and perform some basic operations. Please refer to tutorial 04 for more information.\n\n# Install the required packages\n# conda install psycopg2\n\n# Import the required library\nimport psycopg2\n\n# Connect to the database\nconn = psycopg2.connect(\n    host=\"localhost\", \n    port=5432,\n    database=\"tutorial\",\n    user=\"postgres\",\n    password=\"\") # Change the password to your password\n\n# Create a cursor object. This is used to interact with the database.\ncur = conn.cursor()\n\n\n# Now we will execute the queries\ncur.execute(\"SELECT * FROM students\")\n\n# Fetch the results\nrows = cur.fetchall()\n\n# Print the results\nfor row in rows:\n    print(row)\n\n(1, 'Alice', 25)\n(2, 'Bob', 30)\n(3, 'Charlie', 35)\n\n\n\n# Let us run another query\ncur.execute(\"SELECT * FROM students WHERE name = 'Bob' \")\n\n# Fetch the results\nrows = cur.fetchall()\n\n# Print the results\nfor row in rows:\n    print(row)\n\n(2, 'Bob', 30)\n\n\n\n# Close the cursor and the connection. This is important as it will free up the resources.\ncur.close()\n\n# Commit the transaction. This will save the changes to the database. \n# You do not need to do this if you are only reading from the database.\nconn.commit()\n\n# Close the connection\nconn.close()\n\n\n# Converting tables to pandas dataframe\n# Install the required packages\n# conda install pandas sqlalchemy\n\n# Import the required libraries\nimport pandas as pd\nfrom sqlalchemy import create_engine\n\n# Create a connection to the database\n# The syntax is 'postgresql://username:password@host:port/database'\n# In our case, the username is postgres, password is blank, host is localhost, \n# port is 5432 and database is tutorial\nengine = create_engine('postgresql://postgres:@localhost:5432/tutorial')\n\n# Read the table into a pandas dataframe\ndf = pd.read_sql_table('students', engine)\n\n# Print the dataframe\nprint(df)\n\n   id     name  age\n0   1    Alice   25\n1   2      Bob   30\n2   3  Charlie   35\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html",
    "href": "tutorials/01-vscode-anaconda-tutorial.html",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "",
    "text": "This tutorial will guide students new to computer programming through the process of installing Visual Studio Code (VS Code) and connecting it with Anaconda. We will cover each step in detail to ensure a smooth setup process. If you have any questions or encounter issues during the installation, please feel free to ask for help from me (danilo.freire@emory.edu) or the QTM151 teaching assistants."
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#for-windows-users",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#for-windows-users",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "For Windows Users",
    "text": "For Windows Users\n\nRun the “VSCodeUserSetup-{version}.exe” file.\n\n\n\n\nWindows Installation\n\n\n\nAccept the license agreement and click “Next”.\n\n\n\n\nLicense Agreement\n\n\n\nChoose the installation location (default is recommended) and click “Next”.\n\n\n\n\nInstallation Location\n\n\n\nSelect additional tasks if desired (e.g., adding “Open with Code” action) and click “Next”.\n\n\n\n\nAdditional Tasks\n\n\n\nClick “Install” to begin the installation process.\n\n\n\n\nInstallation Progress"
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#for-macos-users",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#for-macos-users",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "For macOS Users",
    "text": "For macOS Users\n\nOpen the downloaded .zip file and drag the VS Code application to the Applications folder.\n\n\n\n\nUnzip file\n\n\n\n\n\nDrag to Applications folder"
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#for-linux-users",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#for-linux-users",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "For Linux Users",
    "text": "For Linux Users\n\nFollow the distribution-specific instructions provided on the VS Code website."
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#launch-vs-code",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#launch-vs-code",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "Launch VS Code",
    "text": "Launch VS Code\n\nAfter installation, launch VS Code.\nYou should see the welcome screen with options to start a new project or open existing files.\n\n\n\n\nVS Code Welcome Screen"
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#getting-started",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#getting-started",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "Getting Started",
    "text": "Getting Started\nMicrosoft has published a series of introductory videos to help you get started with VS Code. You can also read the official documentation for more detailed information."
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#download-anaconda",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#download-anaconda",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "Download Anaconda",
    "text": "Download Anaconda\n\nVisit the Anaconda website: https://www.anaconda.com/products/distribution. You can skip the registration if you prefer.\n\n\n\n\nAnaconda Website\n\n\n\nClick on the “Download” button for your operating system.\n\n\n\n\nDownload Anaconda"
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#for-windows-users-1",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#for-windows-users-1",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "For Windows Users",
    "text": "For Windows Users\n\nChoose “Just Me” for the installation type (recommended).\n\n\n\n\nAnaconda Installation\n\n\n\nSelect the installation location (default is fine).\n\n\n\n\nAnaconda Installation\n\n\n\nIn the “Advanced Options” section, check “Add Anaconda to my PATH environment variable” and “Register Anaconda as my default Python”.\n\n\n\n\nAdvanced Options"
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#for-macos-users-1",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#for-macos-users-1",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "For macOS Users",
    "text": "For macOS Users\n\nOpen the downloaded .pkg file and follow the installation instructions. You can install Anaconda for all users.\n\n\n\n\nAnaconda Installation\n\n\n\nFollow the on-screen instructions, accepting the default options.\n\n\n\n\nAnaconda Installation"
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#for-linux-users-1",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#for-linux-users-1",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "For Linux Users",
    "text": "For Linux Users\n\nPlease follow the distribution-specific instructions provided on the Anaconda website."
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#verify-anaconda-installation",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#verify-anaconda-installation",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "Verify Anaconda Installation",
    "text": "Verify Anaconda Installation\n\nOpen a new terminal or command prompt. On VS Code, you can do it by clicking on “Terminal” &gt; “New Terminal” in the top menu.\nType conda --version and press Enter. You should see the Conda version number.\nType python --version and press Enter. You should see the Python version installed by Anaconda.\n\n\n\n\nVerify Anaconda Installation"
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#install-the-python-and-jupyer-extensions-in-vs-code",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#install-the-python-and-jupyer-extensions-in-vs-code",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "Install the Python and Jupyer Extensions in VS Code:",
    "text": "Install the Python and Jupyer Extensions in VS Code:\n\nOpen VS Code and click on the Extensions view icon on the left sidebar (it looks like four squares). Search for “Python” in the search bar.\n\n\n\n\nPython Extension in VS Code\n\n\n\nFind the official Python extension by Microsoft and click “Install”.\nPlease also install the Jupyter extension for VS Code to work with Jupyter notebooks.\n\n\n\n\nJupyter Extension in VS Code"
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#select-the-anaconda-python-interpreter",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#select-the-anaconda-python-interpreter",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "Select the Anaconda Python Interpreter:",
    "text": "Select the Anaconda Python Interpreter:\n\nCreate a Python file in VS Code. Click on the “New File” button in the top left corner and save it with a .py extension.\n\n\n\n\nNew Python File in VS Code\n\n\n\nInclude the following code in the file:\n\n\nimport sys\nprint(sys.version)\nprint(sys.executable)\n\n\nSave the file again. Here I saved it as testing-anaconda.py.\n\n\n\n\nSave Python File in VS Code\n\n\n\nPress Ctrl+Shift+P (Windows/Linux) or Cmd+Shift+P (macOS) to open the Command Palette.\n\n\n\n\nCommand Palette in VS Code\n\n\n\nType “Python: Select Interpreter” and select it from the list.\n\n\n\n\nSelect Python Interpreter\n\n\n\nChoose the Anaconda Python interpreter from the list. It should be labelled something like “Python 3.x.x (‘base’) Conda”."
  },
  {
    "objectID": "tutorials/01-vscode-anaconda-tutorial.html#verify-the-connection",
    "href": "tutorials/01-vscode-anaconda-tutorial.html#verify-the-connection",
    "title": "Installing VS Code and Connecting it with Anaconda",
    "section": "Verify the Connection:",
    "text": "Verify the Connection:\n\nPlease click on the “Run” button at the top right corner of the editor to execute the code in your .py file. Select “Run Current File in Dedicated Terminal”\n\n\n\n\nRun Python File in VS Code\n\n\n\nThe output should show the Anaconda Python version and its location.\n\n\n\n\nPython Output in VS Code"
  },
  {
    "objectID": "tutorials/testing-ipython.html",
    "href": "tutorials/testing-ipython.html",
    "title": "Welcome to QTM 151!",
    "section": "",
    "text": "print(\"Welcome to QTM 151!\")\n\nx = 5\ny = 10\nz = x + y\nprint(z)\n\nWelcome to QTM 151!\n15\nThis is a Jupyter Notebook. You can write text, equations, and code in this notebook."
  },
  {
    "objectID": "tutorials/testing-ipython.html#footnotes",
    "href": "tutorials/testing-ipython.html#footnotes",
    "title": "Welcome to QTM 151!",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis is the first footnote.↩︎\nThis is the second footnote.↩︎"
  },
  {
    "objectID": "tutorials/04-postgresql-tutorial.html",
    "href": "tutorials/04-postgresql-tutorial.html",
    "title": "PostgreSQL Tutorial",
    "section": "",
    "text": "Here we will learn how to use PostgreSQL, a powerful object-relational database system. The tutorial has instructions for installing PostgreSQL on your computer, using VS Code as a client, and writing SQL queries to interact with the database. It also includes a section on how to integrate PostgreSQL with Python via the psycopg2 library."
  },
  {
    "objectID": "tutorials/04-postgresql-tutorial.html#footnotes",
    "href": "tutorials/04-postgresql-tutorial.html#footnotes",
    "title": "PostgreSQL Tutorial",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIn SQL, a database is a system that stores and organises multiple sets of related data. It typically contains several tables, each of which is a structured collection of data arranged in rows and columns. For instance, a ‘School’ database might contain separate tables for ‘Students’, ‘Teachers’, and ‘Classes’. Each table would store specific information: the ‘Students’ table might have columns for student ID, name, and year group, with each row representing an individual student’s details. Databases can also contain objects other than tables, such as views (virtual tables used for data retrieval), indexes (optimised data structures for faster data retrieval), and stored procedures (predefined SQL queries that can be reused). While databases are managed by Database Management Systems (DBMS), such as PostgreSQL, and handle overall data organisation and integrity, tables are manipulated using SQL commands for specific data operations within their structure, as we will see below.↩︎"
  },
  {
    "objectID": "tutorials/LICENSE.html",
    "href": "tutorials/LICENSE.html",
    "title": "MIT License",
    "section": "",
    "text": "Copyright (c) 2024 Danilo Freire\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n Back to top"
  },
  {
    "objectID": "lectures/lecture-02/02-github-review.html#learning-objectives",
    "href": "lectures/lecture-02/02-github-review.html#learning-objectives",
    "title": "GitHub Review",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nBy the end of this lecture, you will be able to:\n\n\nUnderstand the difference between cloning and forking a repository​\nLearn how to remove cloned repos​\nUnderstand the GitHub workflow: change, commit, push, fetch, pull​\nLearn how to keep a forked repository updated​\nUnderstand what a virtual environment in Anaconda is and how to create one if needed​"
  },
  {
    "objectID": "lectures/lecture-02/02-github-review.html#software-installation",
    "href": "lectures/lecture-02/02-github-review.html#software-installation",
    "title": "GitHub Review",
    "section": "Software Installation",
    "text": "Software Installation\nWhat we will use in this course\n\n\nFirst, please remember to create a GitHub account if you do not have one yet: https://education.github.com/pack. Use your Emory email address to get the GitHub Student Developer Pack for free. Then install the following software:\nAnaconda (Python distribution)\nGitHub Desktop (Git user interface)\nVisual Studio Code (Code editor)\nPlease check the tutorials on the course repository: https://github.com/danilofreire/qtm151/tutorials. They will help you with the installation and setup of the software.\nYou can also get help from Student Tech Support\nIf you have any questions, please let us know!"
  },
  {
    "objectID": "lectures/lecture-02/02-github-review.html#how-to-access-and-edit-a-remote-repository",
    "href": "lectures/lecture-02/02-github-review.html#how-to-access-and-edit-a-remote-repository",
    "title": "GitHub Review",
    "section": "How to access and edit a remote repository",
    "text": "How to access and edit a remote repository\n\n\nAccess: download a remote GitHub repository to your local computer to work on it​\nEdit: make local changes to the repository and update them to the cloud​\n\nThere are two ways to access a repository:​\n\nCloning ​\nForking - We will use forking in this course​"
  },
  {
    "objectID": "lectures/lecture-02/02-github-review.html#cloning",
    "href": "lectures/lecture-02/02-github-review.html#cloning",
    "title": "GitHub Review",
    "section": "Cloning",
    "text": "Cloning\n\n\n\nMakes a local copy of a repository\nThink of it as downloading a repository onto your local computer\nUnlike forks, clones reference the original repository: you cannot push changes to it unless you have permissions from the owner\nIf you do have permissions, you can overwrite the content of the remote repository"
  },
  {
    "objectID": "lectures/lecture-02/02-github-review.html#cloning-example",
    "href": "lectures/lecture-02/02-github-review.html#cloning-example",
    "title": "GitHub Review",
    "section": "Cloning example",
    "text": "Cloning example\n\n\n\n\nExample repo: https://github.com/danilofreire/qtm151-example-repository\nWe can clone the repo using GitHub desktop\n\nIt does not create a remote copy of the repo in my GitHub page​\n\nIf the users cloning the repo have write access they can replace files and folders in the remote GitHub repo​\nThe purpose of cloning is often to contribute directly to the original repo​ or work offline"
  },
  {
    "objectID": "lectures/lecture-02/02-github-review.html#cloning-example-1",
    "href": "lectures/lecture-02/02-github-review.html#cloning-example-1",
    "title": "GitHub Review",
    "section": "Cloning example",
    "text": "Cloning example"
  },
  {
    "objectID": "lectures/lecture-02/02-github-review.html#cloning-example-2",
    "href": "lectures/lecture-02/02-github-review.html#cloning-example-2",
    "title": "GitHub Review",
    "section": "Cloning example",
    "text": "Cloning example"
  },
  {
    "objectID": "lectures/lecture-02/02-github-review.html#cloning-example-github-desktop",
    "href": "lectures/lecture-02/02-github-review.html#cloning-example-github-desktop",
    "title": "GitHub Review",
    "section": "Cloning example: GitHub Desktop",
    "text": "Cloning example: GitHub Desktop"
  },
  {
    "objectID": "lectures/lecture-02/02-github-review.html#forking",
    "href": "lectures/lecture-02/02-github-review.html#forking",
    "title": "GitHub Review",
    "section": "Forking",
    "text": "Forking\n\n\nCreates your own copy of a repository in your remote GitHub page​\nYour own copy means that you will be able to contribute changes to your copy of the repository without affecting the original repository!​\nOften used to create a personal version of a project for custom modifications\n\nYou can then submit a pull request to the original repository to suggest changes​"
  },
  {
    "objectID": "lectures/lecture-02/02-github-review.html#forking-1",
    "href": "lectures/lecture-02/02-github-review.html#forking-1",
    "title": "GitHub Review",
    "section": "Forking",
    "text": "Forking"
  },
  {
    "objectID": "lectures/lecture-02/02-github-review.html#forking-example",
    "href": "lectures/lecture-02/02-github-review.html#forking-example",
    "title": "GitHub Review",
    "section": "Forking example",
    "text": "Forking example\n\n\n\n\nExample repo: https://github.com/danilofreire/qtm151-example-repository\nWe can fork the repo using the GitHub page\n\nIt creates a remote copy of the repo on your GitHub\nYou can then clone the repo to your local computer and work on it\nYou can push changes to your remote repo\nSee the GitHub Tutorial for more details"
  },
  {
    "objectID": "lectures/lecture-02/02-github-review.html#in-our-course",
    "href": "lectures/lecture-02/02-github-review.html#in-our-course",
    "title": "GitHub Review",
    "section": "In our course",
    "text": "In our course"
  },
  {
    "objectID": "lectures/lecture-02/02-github-review.html#in-our-course-1",
    "href": "lectures/lecture-02/02-github-review.html#in-our-course-1",
    "title": "GitHub Review",
    "section": "In our course",
    "text": "In our course"
  },
  {
    "objectID": "lectures/lecture-02/02-github-review.html#in-our-course-2",
    "href": "lectures/lecture-02/02-github-review.html#in-our-course-2",
    "title": "GitHub Review",
    "section": "In our course",
    "text": "In our course"
  },
  {
    "objectID": "lectures/lecture-02/02-github-review.html#comparing-cloning-and-forking",
    "href": "lectures/lecture-02/02-github-review.html#comparing-cloning-and-forking",
    "title": "GitHub Review",
    "section": "Comparing cloning and forking",
    "text": "Comparing cloning and forking\n\n\n\n\n\n\n\n\n\nFeature\nCloning\nForking\n\n\n\n\nLocal Copy\nYes\nNo (initially only on GitHub)\n\n\nDirect Collaboration\nYes (if permissions allow)\nNo (requires pull requests)\n\n\nSynchronisation\nYes (with the original repository)\nYes (can fetch updates from the original)\n\n\nControl\nLimited (depends on permissions)\nFull (over the forked copy)\n\n\nUse Case\nContributing directly, local development\nIndependent development, contributing via PRs\n\n\nIncludes\nAll files, branches, commit history\nAll files, commit history, but no issues or PRs"
  },
  {
    "objectID": "lectures/lecture-02/02-github-review.html#removing-cloned-and-forked-repositories",
    "href": "lectures/lecture-02/02-github-review.html#removing-cloned-and-forked-repositories",
    "title": "GitHub Review",
    "section": "Removing cloned and forked repositories",
    "text": "Removing cloned and forked repositories\n\n\nIf you cloned or forked a repository and no longer need it, you can delete the local copy​\nDeleting the local copy does not affect the remote repository​\nYou can also delete the remote repository if you have write access to it​ (be careful!)"
  },
  {
    "objectID": "lectures/lecture-02/LICENSE.html",
    "href": "lectures/lecture-02/LICENSE.html",
    "title": "MIT License",
    "section": "",
    "text": "Copyright (c) 2024 Danilo Freire\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n Back to top"
  },
  {
    "objectID": "lectures/lecture-01/hello_world.html",
    "href": "lectures/lecture-01/hello_world.html",
    "title": "Hello World in Python using a Jupyter Notebook",
    "section": "",
    "text": "print('Hello, World!')\n\nHello, World!\n\n\n\nprint('Name')\n\nName\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "lectures/lectures.html",
    "href": "lectures/lectures.html",
    "title": "Lectures",
    "section": "",
    "text": "The course covers the following main topics, with corresponding lecture materials available in the lectures folder in our course repository:"
  },
  {
    "objectID": "lectures/lectures.html#schedule",
    "href": "lectures/lectures.html#schedule",
    "title": "Lectures",
    "section": "Schedule",
    "text": "Schedule\n\nWednesday, August 28: Lecture 01: Welcome to QTM 151 - Introduction. Please make sure to install the necessary software for the course by following the Course Tutorials: How to Install Anaconda, Jupyter, PostgreSQL, VSCode, and Open a Free Educational Account on GitHub.\nMonday, September 02: Labour Day (no class)\nWednesday, September 04: Lecture 02: GitHub Review, Introduction to Jupyter Notebooks. Extra lecture: Lecture slides. Video recording.\n\nAssignment 01: Problem Set 01\n\nMonday, September 09: Lecture 03: Variables and Lists. IPython Notebook, Lecture Slides\nWednesday, September 11: Lecture 04: Mathematical Operations, Arrays, and Random Numbers\n\nAssignment 01 due (5%)\nAssignment 02: Problem Set 02\n\nMonday, September 16: Lecture 05: Boolean Variables and If/Else Statements\nWednesday, September 18: Lecture 06: While Loops and For Loops\n\nAssignment 02 due (5%)\nAssignment 03: Problem Set 03\n\nMonday, September 23: Lecture 07: Applications 1: Simulation Studies\nWednesday, September 25: Lecture 08: Functions and Arguments\n\nAssignment 03 due (5%)\nAssignment 04: Problem Set 04\n\nMonday, September 30: Lecture 09: Global and Local Variables\nWednesday, October 02: Lecture 10: Quiz 01: Application 02 - Operations over Multiple Datasets (6%)\n\nAssignment 05: Problem Set 05\n\nFriday, October 04: Assignment 04 due (5%)\nMonday, October 07: Lecture 11: Subsetting Data\nWednesday, October 09: Lecture 12: Application 03: Linear Models\n\nAssignment 05 due (5%)\nAssignment 06: Problem Set 06\n\nMonday, October 14: Fall Break (no class)\nWednesday, October 16: Lecture 13: Creating and Replacing Variables\n\nAssignment 06 due (5%)\nAssignment 07: Problem Set 07\n\nMonday, October 21: Lecture 14: Quiz 2: Application 4: Random Assignment (6%)\nWednesday, October 23: Lecture 15: Aggregating Data\n\nAssignment 07 due (5%)\nAssignment 08: Problem Set 08\n\nMonday, October 28: Lecture 16: Merging Data\nWednesday, October 30: Lecture 17: Introduction to SQL\n\nAssignment 08 due (5%)\nAssignment 09: Problem Set 09\nInstructions for the Final Project: Final Project\n\nMonday, November 04: Lecture 18: Quiz 3: Application 5: Practicing Chaining (6%)\nWednesday, November 06: Lecture 19: Import SQL Data into Python\n\nAssignment 09 due (5%)\nAssignment 10: Problem Set 10\n\nMonday, November 11: Lecture 20: Merging Tables in SQL\nWednesday, November 13: Lecture 21: Time Series Analysis\n\nAssignment 10 due (5%)\n\nMonday, November 18: Lecture 22: Quiz 4: Application 6: Practice SQL Queries (6%)\nWednesday, November 20: Lecture 23: Pivot Tables\nMonday, November 25: Lecture 24: Quiz 5: Application 8: Time Data, Panel Data, and Plots (6%)\nWednesday, November 27: Thanksgiving Break (no class)\nMonday, December 02: Lecture 25: Manipulating Text Data\nWednesday, December 04: Lecture 26: Advanced Plots\nMonday, December 09: Final Project due (20%)\n\nEach lecture folder contains an HTML file or a Jupyter notebook (.ipynb) with code examples and explanations, along with any additional resources or datasets used in the lecture."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "",
    "text": "Welcome to QTM 151! This course introduces students to data analysis and statistical computing using Python and SQL. Please have a look at the course syllabus and the lecture schedule for more information. A brief overview of the course content is provided below."
  },
  {
    "objectID": "index.html#course-overview",
    "href": "index.html#course-overview",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "",
    "text": "Welcome to QTM 151! This course introduces students to data analysis and statistical computing using Python and SQL. Please have a look at the course syllabus and the lecture schedule for more information. A brief overview of the course content is provided below."
  },
  {
    "objectID": "index.html#contact-information",
    "href": "index.html#contact-information",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Contact Information",
    "text": "Contact Information\n\nName: Danilo Freire\nContact: danilo.freire@emory.edu\nOffice Hours: By appointment at your convenience, please email me to schedule a meeting"
  },
  {
    "objectID": "index.html#repository-structure",
    "href": "index.html#repository-structure",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Repository Structure",
    "text": "Repository Structure\nWhile this website provides an overview of the course materials, the primary source of content is the course’s GitHub repository at https://github.com/danilofreire/qtm151. The repository is organised as follows:\n\nassignments/: Contains all course assignments\nlectures/: Includes lecture materials and code\ntutorials/: Step-by-step guides for the tools used in the course\nsyllabus.pdf: Course syllabus in PDF format\n\nPlease also refer to the Discussion tab on the repository for any questions or comments: https://github.com/danilofreire/qtm151/discussions.\nNote: The links will take you to the respective folders or files in the repository, not on this website. You can find links for the rendered content in the navigation bar above."
  },
  {
    "objectID": "index.html#course-content",
    "href": "index.html#course-content",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Course Content",
    "text": "Course Content\n\nLectures\nWe will meet every Monday and Wednesday from 16:00 to 16:50 in the Anthropology Building, 303. Please check the course schedule for the full list of topics and dates. Lecture materials are available in the lectures folder in the repository.\nEach folder contains an HTML presentation or a Jupyter notebook (.ipynb) with code examples and explanations, along with any additional resources or datasets used in the lecture.\n\n\nAssignments and Quizzes\nThroughout the course, students will complete various assignments and quizzes to reinforce their learning. These will be posted in the assignments/ folder as the course progresses. We will also announce these in class and on Canvas. Please refer to the syllabus or the lecture schedule for due dates and submission guidelines.\n\n\nTutorials\nThe tutorials/ tab contains step-by-step guides for various tools and techniques used in the course. Please have a look at these resources to help you get started.\nPDF versions of the tutorials are also available in the repository."
  },
  {
    "objectID": "index.html#course-requirements",
    "href": "index.html#course-requirements",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Course Requirements",
    "text": "Course Requirements\n\nPrerequisites: None, only willingness to learn and explore new tools!\nSoftware: Anaconda distribution of Python 3.x, VS Code, PostgreSQL, and GitHub Desktop\nPlease also create an educational account on GitHub"
  },
  {
    "objectID": "index.html#grading",
    "href": "index.html#grading",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Grading",
    "text": "Grading\n\nAssignments: 50%\nClass Quizzes: 30%\nFinal Project: 20%"
  },
  {
    "objectID": "index.html#course-policies-and-expectations",
    "href": "index.html#course-policies-and-expectations",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Course Policies and Expectations",
    "text": "Course Policies and Expectations\nFor detailed information on course policies, grading criteria, attendance requirements, and academic integrity guidelines, please refer to the syllabus in the repository or on the course website."
  },
  {
    "objectID": "index.html#getting-help",
    "href": "index.html#getting-help",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Getting Help",
    "text": "Getting Help\nIf you encounter any issues with the course materials or have questions about the content, please:\n\nCheck the course syllabus for relevant information\nReview the lecture materials and tutorials either in the repository or on the course website\nConsult with your classmates or post in the course discussion forum\nAttend office hours or schedule an appointment with the instructor"
  },
  {
    "objectID": "index.html#contributing-to-the-repository",
    "href": "index.html#contributing-to-the-repository",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Contributing to the Repository",
    "text": "Contributing to the Repository\nWhile this repository is primarily maintained by the course instructor, everyone is welcome to contribute. Please feel free to suggest improvements or report issues by opening a GitHub issue, submitting a pull request, creating a discussion post, or contacting the instructor directly."
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nThis course and its materials have been developed with inspiration from previous version of this course, as well as various open-source communities and educational resources. I am particularly grateful to Alejandro Sánchez Becerra for his teaching materials and guidance. I am also thankful for the contributions of the Python, SQL, and data science communities that make courses like this possible."
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "QTM 151 - Introduction to Statistical Computing II",
    "section": "License",
    "text": "License\nThis repository is licensed under the MIT License. You are free to use, modify, and distribute the materials as needed, with appropriate attribution to the original source.\n\nWe look forward to an engaging and productive semester! Good luck, and happy coding! :smiley:"
  },
  {
    "objectID": "assignments/LICENSE.html",
    "href": "assignments/LICENSE.html",
    "title": "MIT License",
    "section": "",
    "text": "Copyright (c) 2024 Danilo Freire\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignments.html",
    "href": "assignments/assignments.html",
    "title": "Assignments",
    "section": "",
    "text": "The course assessment consists of ten assignments, five in-class quizzes, and a final project. Each assignment is worth 5% of your final grade (50%), while each quiz contributes 6% (30%). The final project accounts for the remaining 20% of your grade. All assignments for the course can be found in this section."
  },
  {
    "objectID": "assignments/assignments.html#assignment-schedule",
    "href": "assignments/assignments.html#assignment-schedule",
    "title": "Assignments",
    "section": "Assignment Schedule",
    "text": "Assignment Schedule\n\nWednesday, September 04:\n\nAssignment 01: Problem Set 01\n\nWednesday, September 11:\n\nAssignment 01 due (5%)\nAssignment 02: Problem Set 02\n\nWednesday, September 18:\n\nAssignment 02 due (5%)\nAssignment 03: Problem Set 03\n\nWednesday, September 25:\n\nAssignment 03 due (5%)\nAssignment 04: Problem Set 04\n\nWednesday, October 02:\n\nAssignment 05: Problem Set 05\n\nFriday, October 04: Assignment 04 due (5%)\nWednesday, October 09:\n\nAssignment 05 due (5%)\nAssignment 06: Problem Set 06\n\nWednesday, October 16:\n\nAssignment 06 due (5%)\nAssignment 07: Problem Set 07\n\nWednesday, October 23:\n\nAssignment 07 due (5%)\nAssignment 08: Problem Set 08\n\nWednesday, October 30:\n\nAssignment 08 due (5%)\nAssignment 09: Problem Set 09\nInstructions for the Final Project: Final Project\n\nWednesday, November 06:\n\nAssignment 09 due (5%)\nAssignment 10: Problem Set 10\n\nWednesday, November 13:\n\nAssignment 10 due (5%)\n\nMonday, December 09: Final Project due (20%)"
  },
  {
    "objectID": "assignments/assignments.html#schedule",
    "href": "assignments/assignments.html#schedule",
    "title": "Assignments",
    "section": "Schedule",
    "text": "Schedule\n\nWednesday, September 04:\n\nAssignment 01: Problem Set 01\n\nWednesday, September 11:\n\nAssignment 01 due (5%)\nAssignment 02: Problem Set 02\n\nWednesday, September 18:\n\nAssignment 02 due (5%)\nAssignment 03: Problem Set 03\n\nWednesday, September 25:\n\nAssignment 03 due (5%)\nAssignment 04: Problem Set 04\n\nWednesday, October 02:\n\nAssignment 05: Problem Set 05\n\nFriday, October 04: Assignment 04 due (5%)\nWednesday, October 09:\n\nAssignment 05 due (5%)\nAssignment 06: Problem Set 06\n\nWednesday, October 16:\n\nAssignment 06 due (5%)\nAssignment 07: Problem Set 07\n\nWednesday, October 23:\n\nAssignment 07 due (5%)\nAssignment 08: Problem Set 08\n\nWednesday, October 30:\n\nAssignment 08 due (5%)\nAssignment 09: Problem Set 09\nInstructions for the Final Project: Final Project\n\nWednesday, November 06:\n\nAssignment 09 due (5%)\nAssignment 10: Problem Set 10\n\nWednesday, November 13:\n\nAssignment 10 due (5%)\n\nMonday, December 09: Final Project due (20%)"
  }
]